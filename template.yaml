AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AppSync API with Lambda Resolver example
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyAppSyncUserPool
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyAppSyncUserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: MyAppSyncApi
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
        UserPoolId: !Ref CognitoUserPool

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Query {
          getHello: String
        }
        type Mutation {
          addEvent(event: AWSJSON): ID
        }
        schema {
          query: Query
          mutation: Mutation
        }

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EventsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  AppSyncEventDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: EventsTable
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncEventDataSourceRole.Arn
      DynamoDBConfig:
        TableName: !Ref EventsTable
        AwsRegion: !Ref AWS::Region
  
  AppSyncEventDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AppSyncEventDataSourcePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt EventsTable.Arn

  AppSyncAddEventResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: addEvent
      DataSourceName: !GetAtt AppSyncEventDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
            "id" : $util.dynamodb.toDynamoDBJson($util.autoId())
          },
          "attributeValues" : {
            "event" : $util.dynamodb.toDynamoDBJson($ctx.args.event)
                  }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.id)

  # AppSyncGetHelloResolver:
  #   Type: AWS::AppSync::Resolver
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     TypeName: Query
  #     FieldName: getHello
  #     DataSourceName: !GetAtt AppSyncEventDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version": "2017-02-28",
  #         "payload": {}
  #       }
  #     ResponseMappingTemplate: |
  #       $util.toJson("Hello, world!") 

  # LambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Metadata:
  #     BuildMethod: go1.x
  #   Properties:
  #     CodeUri: cmd/
  #     Handler: bootstrap
  #     Runtime: provided.al2
  #     FunctionName: simple-es-stask-lambda-resolver
  #     Architectures: [arm64]
  #     Environment:
  #       Variables:
  #         LOG_LEVEL: DEBUG
  #         PARAM1: VALUE

  # AppSyncLambdaDataSource:
  #   Type: AWS::AppSync::DataSource
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     Name: AppSyncLambdaDataSource
  #     Type: AWS_LAMBDA
  #     LambdaConfig:
  #       LambdaFunctionArn: !GetAtt LambdaFunction.Arn
  #     ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn

  # AppSyncLambdaRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - appsync.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Policies:
  #       - PolicyName: AppSyncLambdaRolePolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - lambda:InvokeFunction
  #               Resource:
  #                 - !GetAtt LambdaFunction.Arn

  # AppSyncLambdaResolver:
  #   Type: AWS::AppSync::Resolver
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     TypeName: Query
  #     FieldName: getHello
  #     DataSourceName: !GetAtt AppSyncLambdaDataSource.Name

Outputs:
  GraphQLApiUrl:
    Description: The URL of the AppSync API
    Value: !GetAtt AppSyncApi.GraphQLUrl

  UserPoolId:
    Description: The ID of the Cognito User Pool
    Value: !Ref CognitoUserPool

  UserPoolClientId:
    Description: The ID of the Cognito User Pool Client
    Value: !Ref CognitoUserPoolClient